import org.gradle.internal.os.OperatingSystem

plugins {
    alias(libs.plugins.android.library)
    id("de.undercouch.download") version "5.6.0"
    id 'maven-publish'
}

group = 'com.github.dalgarins'

gradle.projectsEvaluated {
    preBuild.dependsOn(buildSqlite)
}

android {
    namespace 'org.spatialite'
    compileSdk 34
    ndkVersion '21.0.6113669'

    defaultConfig {
        minSdk 21

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }

    sourceSets.main.jni.srcDirs = ['src/main/none']
}

ext {
    sqliteDistributionUrl = 'https://www.sqlite.org/2025/sqlite-amalgamation-3490100.zip'
}

tasks.register('downloadSqlite', Download) {
    src project.sqliteDistributionUrl
    dest 'src/main/jni/ndk-modules/sqlite/sqlite.zip'
}

tasks.register('installSqlite', Copy) {
    dependsOn downloadSqlite
    from zipTree(downloadSqlite.dest).matching {
        include '*/sqlite3.*'
        eachFile { it.setPath(it.getName()) }
    }
    into 'src/main/jni/ndk-modules/sqlite'
}

def ndkDir = System.getenv("NDK_HOME")
if (ndkDir == null) {
    def propertiesFile = project.rootProject.file('local.properties')
    if (propertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(propertiesFile.newDataInputStream())
        ndkDir = properties.getProperty('ndk.dir')
        if (ndkDir == null) {
            throw GradleScriptException("Either NDK_HOME or ndk.dir in local.properties should point to Android NDK!")
        }
    } else {
        throw GradleScriptException("Either NDK_HOME or ndk.dir in local.properties should point to Android NDK!")
    }
}

tasks.register('buildSqlite', Exec) {
    dependsOn installSqlite
    println("NDK directory: $ndkDir")

    // Add NDK_DEBUG=1 for debug symbols or V=1 for verbose building output
    if (OperatingSystem.current().linux) {
        commandLine "$ndkDir/ndk-build", '-j8', '-C', file('src/main/jni').absolutePath
    } else if (OperatingSystem.current().windows) {
        commandLine "$ndkDir/ndk-build.cmd", '-j8', '-C', file('src/main/jni').absolutePath
    } else {
        commandLine "$ndkDir/ndk-build", '-j8', '-C', file('src/main/jni').absolutePath
    }
}

tasks.register('ndkClean', Exec) {
    if (OperatingSystem.current().linux) {
        commandLine "$ndkDir/ndk-build", 'clean', '-C', file('src/main/jni').absolutePath
    } else if (OperatingSystem.current().windows) {
        commandLine "$ndkDir/ndk-build.cmd", 'clean', '-C', file('src/main/jni').absolutePath
    } else {
        commandLine "$ndkDir/ndk-build", 'clean', '-C', file('src/main/jni').absolutePath
    }
}

clean.dependsOn 'ndkClean'

dependencies {

    implementation libs.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.github.dalgarins'
            artifactId = 'android-spatialite'
            version = '2.1.2-alpha'

            afterEvaluate {
                from components.release
            }
        }
    }
}